package snowflake_test

import (
	"testing"

	snowflake "github.com/vonix/gorm-snowflake"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"
)

func getExprSQL(t *testing.T, expr clause.Expression) (sql string, vars []interface{}) {
	t.Helper()
	e, ok := expr.(clause.Expr)
	if !ok {
		t.Fatalf("expected clause.Expr, got %T", expr)
	}
	return e.SQL, e.Vars
}

func TestDefaultValueOf_AutoIncrementFalse(t *testing.T) {
	d := snowflake.Dialector{}

	field := &schema.Field{
		Name:          "AgentID",
		DBName:        "AGENT_ID",
		DataType:      schema.Int,
		AutoIncrement: false,
	}

	sql, _ := getExprSQL(t, d.DefaultValueOf(field))

	if sql != "NULL" {
		t.Errorf("expected NULL, got %s", sql)
	}
}

func TestDefaultValueOf_AutoIncrementTrue(t *testing.T) {
	d := snowflake.Dialector{}

	field := &schema.Field{
		Name:          "AgentID",
		DBName:        "AGENT_ID",
		DataType:      schema.Int,
		AutoIncrement: true,
	}

	sql, _ := getExprSQL(t, d.DefaultValueOf(field))

	want := "GENERATED BY DEFAULT AS IDENTITY"
	if sql != want {
		t.Errorf("expected %s, got %s", want, sql)
	}
}

func TestDefaultValueOf_Timestamp(t *testing.T) {
	d := snowflake.Dialector{}

	field := &schema.Field{
		Name:         "CreatedAt",
		DBName:       "CREATED_AT",
		DataType:     schema.Time,
		DefaultValue: "CURRENT_TIMESTAMP",
	}

	sql, _ := getExprSQL(t, d.DefaultValueOf(field))

	want := "CURRENT_TIMESTAMP"
	if sql != want {
		t.Errorf("expected %s, got %s", want, sql)
	}
}

func TestDefaultValueOf_BooleanTrue(t *testing.T) {
	d := snowflake.Dialector{}

	field := &schema.Field{
		Name:         "Active",
		DBName:       "ACTIVE",
		DataType:     schema.Bool,
		DefaultValue: "true",
	}

	sql, _ := getExprSQL(t, d.DefaultValueOf(field))

	want := "TRUE"
	if sql != want {
		t.Errorf("expected %s, got %s", want, sql)
	}
}
